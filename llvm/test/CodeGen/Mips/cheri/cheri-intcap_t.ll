; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc %s -o - | FileCheck %s

; CHECK: c1
; Function Attrs: nounwind readnone
define i32 @c1(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: c1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    slt $2, $1, $2
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = icmp slt i64 %1, %2
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @c2(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: c2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    xor $1, $1, $2
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sltiu $2, $1, 1
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = icmp eq i64 %1, %2
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @c3(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: c3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    slt $2, $2, $1
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = icmp sgt i64 %1, %2
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @c4(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: c4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    slt $1, $1, $2
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    xori $2, $1, 1
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = icmp sge i64 %1, %2
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @c5(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: c5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    slt $1, $2, $1
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    xori $2, $1, 1
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = icmp sle i64 %1, %2
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @ca1(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: ca1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    dsubu $1, $1, $2
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sll $2, $1, 0
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = sub nsw i64 %1, %2
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @ca2(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: ca2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    daddu $1, $2, $1
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sll $2, $1, 0
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = add nsw i64 %2, %1
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @ca3(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: ca3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    dmult $2, $1
; CHECK-NEXT:    mflo $1
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sll $2, $1, 0
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = mul nsw i64 %2, %1
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @ca4(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: ca4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $3, $c4, $ddc
; CHECK-NEXT:    ddiv $zero, $1, $3
; CHECK-NEXT:    mflo $1
; CHECK-NEXT:    sll $2, $1, 0
; CHECK-NEXT:    teq $3, $zero, 7
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    nop
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = sdiv i64 %1, %2
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
define i32 @p1(i8* readnone %x, i8* readnone %y) #0 {
; CHECK-LABEL: p1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    slt $2, $4, $5
  %1 = icmp slt i8* %x, %y
  %2 = zext i1 %1 to i32
  ret i32 %2
}

; Function Attrs: nounwind readnone
define i8 addrspace(200)* @castc(i8 addrspace(200)* readnone %a) #0 {
; CHECK-LABEL: castc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    nop
  ret i8 addrspace(200)* %a
}

; Function Attrs: nounwind readnone
define i8* @castp(i8 addrspace(200)* %a) #0 {
; CHECK-LABEL: castp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    ctoptr $2, $c3, $ddc
  %1 = ptrtoint i8 addrspace(200)* %a to i64
  %2 = inttoptr i64 %1 to i8*
  ret i8* %2
}

; Function Attrs: nounwind readnone
define i32 @cp(i8 addrspace(200)* %x, i8 addrspace(200)* %y) #0 {
; CHECK-LABEL: cp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctoptr $1, $c3, $ddc
; CHECK-NEXT:    ctoptr $2, $c4, $ddc
; CHECK-NEXT:    dsubu $1, $1, $2
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sll $2, $1, 0
  %1 = ptrtoint i8 addrspace(200)* %x to i64
  %2 = ptrtoint i8 addrspace(200)* %y to i64
  %3 = sub i64 %1, %2
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

attributes #0 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
