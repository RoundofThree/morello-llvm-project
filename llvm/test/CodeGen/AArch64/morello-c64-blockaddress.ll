; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64-none-linux-gnu -mattr=+c64,+morello -target-abi purecap -aarch64-enable-atomic-cfg-tidy=0 -verify-machineinstrs < %s | FileCheck %s

@addr = addrspace(200) global i8 addrspace(200)* blockaddress(@test_blockaddress, %block)

define void @test_blockaddress() nounwind {
; CHECK-LABEL: test_blockaddress:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp c0, :got:addr
; CHECK-NEXT:    ldr c0, [c0, :got_lo12:addr]
; CHECK-NEXT:    adrp c1, .Ltmp0
; CHECK-NEXT:    add c1, c1, :lo12:.Ltmp0+1
; CHECK-NEXT:    seal c1, c1, rb
; CHECK-NEXT:    str c1, [c0, #0]
; CHECK-NEXT:    ldr c0, [c0, #0]
; CHECK-NEXT:    br c0
; CHECK-NEXT:  .Ltmp0: // Block address taken
; CHECK-NEXT:  .LBB0_1: // %block
; CHECK-NEXT:    ret c30
  store volatile i8 addrspace(200)* blockaddress(@test_blockaddress, %block), i8 addrspace(200)* addrspace(200)* @addr
  %val = load volatile i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* @addr
  indirectbr i8 addrspace(200)* %val, [label %block]

block:
  ret void
}

; CHECK-LABEL: addr:
; CHECK-NEXT:	.capinit test_blockaddress+((.Ltmp0+1)-test_blockaddress)
; CHECK-NEXT:	.xword	0
; CHECK-NEXT:	.xword	0
