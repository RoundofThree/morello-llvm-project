; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=aarch64-linux-gnu -O0 -mattr=+c64,+morello -target-abi purecap -fast-isel=0 -global-isel=false %s -o - | FileCheck %s

define { i8, i1 } @test_cmpxchg_8(i8 addrspace(200)* %addr, i8 %desired, i8 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_8:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov w9, w2
; CHECK-NEXT:    mov c2, c0
; CHECK-NEXT:  .LBB0_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxrb w0, [c2]
; CHECK-NEXT:    cmp w0, w1, uxtb
; CHECK-NEXT:    b.ne .LBB0_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    stlxrb w8, w9, [c2]
; CHECK-NEXT:    cbnz w8, .LBB0_1
; CHECK-NEXT:  .LBB0_3:
; CHECK-NEXT:    subs w8, w0, w1, uxtb
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret c30
  %res = cmpxchg i8 addrspace(200)* %addr, i8 %desired, i8 %new seq_cst monotonic
  ret { i8, i1 } %res
}

define { i16, i1 } @test_cmpxchg_16(i16 addrspace(200)* %addr, i16 %desired, i16 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_16:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov w9, w2
; CHECK-NEXT:    mov c2, c0
; CHECK-NEXT:  .LBB1_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxrh w0, [c2]
; CHECK-NEXT:    cmp w0, w1, uxth
; CHECK-NEXT:    b.ne .LBB1_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    stlxrh w8, w9, [c2]
; CHECK-NEXT:    cbnz w8, .LBB1_1
; CHECK-NEXT:  .LBB1_3:
; CHECK-NEXT:    subs w8, w0, w1, uxth
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret c30
  %res = cmpxchg i16 addrspace(200)* %addr, i16 %desired, i16 %new seq_cst monotonic
  ret { i16, i1 } %res
}

define { i32, i1 } @test_cmpxchg_32(i32 addrspace(200)* %addr, i32 %desired, i32 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_32:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov w9, w2
; CHECK-NEXT:    mov c2, c0
; CHECK-NEXT:  .LBB2_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxr w0, [c2]
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ne .LBB2_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    stlxr w8, w9, [c2]
; CHECK-NEXT:    cbnz w8, .LBB2_1
; CHECK-NEXT:  .LBB2_3:
; CHECK-NEXT:    subs w8, w0, w1
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret c30
  %res = cmpxchg i32 addrspace(200)* %addr, i32 %desired, i32 %new seq_cst monotonic
  ret { i32, i1 } %res
}

define { i64, i1 } @test_cmpxchg_64(i64 addrspace(200)* %addr, i64 %desired, i64 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_64:
; CHECK:       .Lfunc_begin3:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov x9, x2
; CHECK-NEXT:    mov c2, c0
; CHECK-NEXT:  .LBB3_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxr x0, [c2]
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    b.ne .LBB3_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB3_1 Depth=1
; CHECK-NEXT:    stlxr w8, x9, [c2]
; CHECK-NEXT:    cbnz w8, .LBB3_1
; CHECK-NEXT:  .LBB3_3:
; CHECK-NEXT:    subs x8, x0, x1
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret c30
  %res = cmpxchg i64 addrspace(200)* %addr, i64 %desired, i64 %new seq_cst monotonic
  ret { i64, i1 } %res
}

define { i8 addrspace(200)*, i1 } @test_cmpxchg_fatptr(i8 addrspace(200)* addrspace(200)* %addr, i8 addrspace(200)* %desired, i8 addrspace(200)* %new) nounwind {
; CHECK-LABEL: test_cmpxchg_fatptr:
; CHECK:       .Lfunc_begin4:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov c3, c0
; CHECK-NEXT:    mov c0, c1
; CHECK-NEXT:    casal c0, c2, [c3]
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:    mov x9, x1
; CHECK-NEXT:    subs x8, x8, x9
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret c30
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %addr, i8 addrspace(200)* %desired, i8 addrspace(200)* %new seq_cst monotonic
  ret { i8 addrspace(200)*, i1 } %res
}
