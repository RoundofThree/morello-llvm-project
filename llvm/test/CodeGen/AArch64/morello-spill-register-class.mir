# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
## Check that we don't generate a PCapLoadImmPre with an invalid register class (capsp) when spilling to the stack.
## FIXME: it would be nice to reduce this test case further, it is very depedent on the spilling logic...
# RUN: llc -mtriple=aarch64 %s -run-pass=greedy -o - -target-abi purecap -mattr=+morello,+c64 -verify-machineinstrs | FileCheck %s
--- |

  @global.20 = external global i8

  define i32 @wibble() addrspace(200) #0 {
    %tmp92 = alloca i8, align 4
    ret i32 1
  }

  attributes #0 = { "frame-pointer"="non-leaf" "target-features"="+morello,+c64" }

...
---
name:            wibble
frameInfo:
  hasCalls:        true
stack:
  - { id: 0   , size: 6,
      debug-info-location: '' }
  - { id: 1, name: tmp92, type: default, offset: 0, size: 6, alignment: 16,
      debug-info-location: '' }
registers:
  - { id: 0, class: capsp, preferred-register: '' }
  - { id: 1, class: capsp, preferred-register: '' }
  - { id: 2, class: capsp, preferred-register: '' }
  - { id: 3, class: capsp, preferred-register: '' }
  - { id: 4, class: capall, preferred-register: '' }
  - { id: 5, class: cap_and_capsp, preferred-register: '' }
  - { id: 6, class: gpr64, preferred-register: '' }
  - { id: 7, class: gpr64, preferred-register: '' }
  - { id: 8, class: cap_and_capsp, preferred-register: '' }
  - { id: 9, class: gpr64, preferred-register: '' }
  - { id: 10, class: cap, preferred-register: '' }
  - { id: 11, class: capsp, preferred-register: '' }
  - { id: 12, class: capall, preferred-register: '' }
  - { id: 13, class: gpr64, preferred-register: '' }
  - { id: 14, class: cap, preferred-register: '' }
  - { id: 15, class: cap, preferred-register: '' }
  - { id: 16, class: gpr32, preferred-register: '' }
body:             |
  ; CHECK-LABEL: name: wibble
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[CapAddImm:%[0-9]+]]:capsp = CapAddImm %stack.0, 0, 0
  ; CHECK-NEXT:   [[CapSetBoundsImm:%[0-9]+]]:capsp = CapSetBoundsImm [[CapAddImm]], 6, 0
  ; CHECK-NEXT:   [[CapAddImm1:%[0-9]+]]:capsp = CapAddImm %stack.1.tmp92, 0, 0
  ; CHECK-NEXT:   [[CapSetBoundsImm1:%[0-9]+]]:cap_and_capsp = CapSetBoundsImm [[CapAddImm1]], 6, 0
  ; CHECK-NEXT:   PCapStoreImmPre [[CapSetBoundsImm1]], %stack.2, 0 :: (store (s128) into %stack.2)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:capall = COPY $noreg
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:cap_and_capsp = COPY $noreg
  ; CHECK-NEXT:   undef %6.sub_32:gpr64 = MOVi32imm 1
  ; CHECK-NEXT:   [[MOVi64imm:%[0-9]+]]:gpr64 = MOVi64imm 4
  ; CHECK-NEXT:   [[CapAddRegX:%[0-9]+]]:cap_and_capsp = CapAddRegX [[COPY1]], undef %9:gpr64, 4
  ; CHECK-NEXT:   [[CMOVbaseTLS:%[0-9]+]]:cap = CMOVbaseTLS
  ; CHECK-NEXT:   [[LOADCgot:%[0-9]+]]:capsp = LOADCgot @global.20
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000), %bb.2(0x00000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:capall = COPY [[COPY]]
  ; CHECK-NEXT:   dead %13:gpr64 = LSLVXr %6, [[MOVi64imm]]
  ; CHECK-NEXT:   $noreg = COPY [[CMOVbaseTLS]]
  ; CHECK-NEXT:   dead %14:cap = PCapLoadImmPre [[LOADCgot]], 0
  ; CHECK-NEXT:   [[CapCondSel:%[0-9]+]]:cap = CapCondSel [[COPY1]], [[CapAddRegX]], $nzcv
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   BL csr_aarch64_aapcs_32cap_regs, implicit-def $lr
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:gpr32 = COPY $noreg
  ; CHECK-NEXT:   CBZW [[COPY3]], %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x00000000), %bb.4(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   $noreg = COPY [[COPY2]]
  ; CHECK-NEXT:   $noreg = COPY [[CapSetBoundsImm]]
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   $noreg = COPY [[CapCondSel]]
  ; CHECK-NEXT:   [[PCapLoadImmPre:%[0-9]+]]:cap_and_capsp = PCapLoadImmPre %stack.2, 0 :: (load (s128) from %stack.2)
  ; CHECK-NEXT:   $noreg = COPY [[PCapLoadImmPre]]
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   CBNZW $noreg, %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT:   $noreg = COPY [[PCapLoadImmPre]]
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  bb.0:
    successors: %bb.1(0x80000000)

    %0:capsp = CapAddImm %stack.0, 0, 0
    %1:capsp = CapSetBoundsImm %0, 6, 0
    %2:capsp = CapAddImm %stack.1.tmp92, 0, 0
    %3:capsp = CapSetBoundsImm %2, 6, 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    %4:capall = COPY $noreg
    %5:cap_and_capsp = COPY $noreg
    undef %6.sub_32:gpr64 = MOVi32imm 1
    %7:gpr64 = MOVi64imm 4
    %8:cap_and_capsp = CapAddRegX %5, undef %9:gpr64, 4
    %10:cap = CMOVbaseTLS
    %11:capsp = LOADCgot @global.20

  bb.1:
    successors: %bb.1(0x80000000), %bb.3(0x00000000)

    %12:capall = COPY %4
    %13:gpr64 = LSLVXr %6, %7
    $noreg = COPY %10
    %14:cap = PCapLoadImmPre %11, 0
    %15:cap = CapCondSel %5, %8, $nzcv
    ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    BL csr_aarch64_aapcs_32cap_regs, implicit-def $lr
    ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    %16:gpr32 = COPY $noreg
    CBZW %16, %bb.1

  bb.3:
    successors: %bb.4(0x00000000), %bb.5(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    $noreg = COPY %12
    $noreg = COPY %1
    ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    $noreg = COPY %15
    $noreg = COPY %3
    ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
    CBNZW $noreg, %bb.5

  bb.4:
    successors: %bb.5(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
    $noreg = COPY %3
    ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp

  bb.5:

...
