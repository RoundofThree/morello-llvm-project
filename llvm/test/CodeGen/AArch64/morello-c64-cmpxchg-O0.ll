; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=aarch64-linux-gnu -O0 -target-abi purecap -mattr=+c64,+morello -fast-isel=0 -global-isel=false %s -o - | FileCheck %s

; Test the i128 cmpxchg here. We don't support the alternate base at this moment.

define { i128, i1 } @test_cmpxchg_128(i128 addrspace(200)* %addr, i128 %desired, i128 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_128:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov x9, x4
; CHECK-NEXT:    mov c4, c0
; CHECK-NEXT:  .LBB0_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxp x0, x1, [c4]
; CHECK-NEXT:    cmp x0, x2
; CHECK-NEXT:    cset w8, ne
; CHECK-NEXT:    cmp x1, x3
; CHECK-NEXT:    cinc w8, w8, ne
; CHECK-NEXT:    cbnz w8, .LBB0_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    stlxp w8, x9, x5, [c4]
; CHECK-NEXT:    cbnz w8, .LBB0_1
; CHECK-NEXT:    b .LBB0_4
; CHECK-NEXT:  .LBB0_3: // in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    stlxp w8, x0, x1, [c4]
; CHECK-NEXT:    cbnz w8, .LBB0_1
; CHECK-NEXT:  .LBB0_4:
; CHECK-NEXT:    eor x9, x1, x3
; CHECK-NEXT:    eor x8, x0, x2
; CHECK-NEXT:    orr x8, x8, x9
; CHECK-NEXT:    subs x8, x8, #0 // =0
; CHECK-NEXT:    cset w2, eq
; CHECK-NEXT:    ret c30
  %res = cmpxchg i128 addrspace(200)* %addr, i128 %desired, i128 %new seq_cst monotonic
  ret { i128, i1 } %res
}
