; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=aarch64-none-elf -aarch64-sandbox-merge=false -mattr=+c64,+morello -target-abi=purecap | FileCheck %s --check-prefix=CHECK --check-prefix=ALL
; RUN: llc < %s -mtriple=aarch64-none-elf -aarch64-sandbox-merge=false -mattr=+c64,+morello -target-abi=purecap -aarch64-enable-global-merge | FileCheck %s --check-prefix=MERGE --check-prefix=MERGESYM --check-prefix=ALL
; RUN: llc < %s -mtriple=aarch64-none-elf -mattr=+c64,+morello -target-abi=purecap -aarch64-enable-global-merge | FileCheck %s --check-prefix=MERGEOPT --check-prefix=MERGESYM

target datalayout = "e-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-A200-P200-G200"
target triple = "aarch64-none-unknown-elf"

@x0 = internal addrspace(200) global i32 0, align 4
@x1 = internal addrspace(200) global i32 0, align 4
@x2 = internal addrspace(200) global i32 0, align 4
@x3 = internal addrspace(200) global i32 0, align 4
@x4 = internal addrspace(200) global i32 0, align 4
@x5 = internal addrspace(200) global i32 0, align 4
@x6 = internal addrspace(200) global i32 0, align 4
@x7 = internal addrspace(200) global i32 0, align 4
@x8 = internal addrspace(200) global i32 0, align 4
@x9 = internal addrspace(200) global i32 0, align 4
@x10 = internal addrspace(200) global i32 0, align 4
@x11 = internal addrspace(200) global i32 0, align 4
@x12 = internal addrspace(200) global i32 0, align 4
@x13 = internal addrspace(200) global i32 0, align 4
@x14 = internal addrspace(200) global i32 0, align 4
@x15 = internal addrspace(200) global i32 0, align 4
@x16 = internal addrspace(200) global i32 0, align 4
@x17 = internal addrspace(200) global i32 0, align 4
@x18 = internal addrspace(200) global i32 0, align 4
@x19 = internal addrspace(200) global i32 0, align 4

define i32 @getvals(i8 addrspace(200)* addrspace(200)* nocapture %a) local_unnamed_addr addrspace(200)  {
; CHECK-LABEL: getvals:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c1, .L__cap_merged_table
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table]
; CHECK-NEXT:    adrp c2, .L__cap_merged_table+16
; CHECK-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+16]
; CHECK-NEXT:    adrp c3, .L__cap_merged_table+32
; CHECK-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+32]
; CHECK-NEXT:    adrp c4, .L__cap_merged_table+48
; CHECK-NEXT:    ldr c4, [c4, :lo12:.L__cap_merged_table+48]
; CHECK-NEXT:    adrp c5, .L__cap_merged_table+64
; CHECK-NEXT:    ldr c5, [c5, :lo12:.L__cap_merged_table+64]
; CHECK-NEXT:    adrp c6, .L__cap_merged_table+80
; CHECK-NEXT:    ldr c6, [c6, :lo12:.L__cap_merged_table+80]
; CHECK-NEXT:    adrp c7, .L__cap_merged_table+96
; CHECK-NEXT:    ldr c7, [c7, :lo12:.L__cap_merged_table+96]
; CHECK-NEXT:    adrp c8, .L__cap_merged_table+112
; CHECK-NEXT:    ldr c8, [c8, :lo12:.L__cap_merged_table+112]
; CHECK-NEXT:    adrp c9, .L__cap_merged_table+128
; CHECK-NEXT:    ldr c9, [c9, :lo12:.L__cap_merged_table+128]
; CHECK-NEXT:    adrp c10, .L__cap_merged_table+144
; CHECK-NEXT:    ldr c10, [c10, :lo12:.L__cap_merged_table+144]
; CHECK-NEXT:    adrp c11, .L__cap_merged_table+160
; CHECK-NEXT:    ldr c11, [c11, :lo12:.L__cap_merged_table+160]
; CHECK-NEXT:    stp c1, c2, [c0, #0]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+176
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+176]
; CHECK-NEXT:    stp c3, c4, [c0, #32]
; CHECK-NEXT:    adrp c2, .L__cap_merged_table+192
; CHECK-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+192]
; CHECK-NEXT:    stp c5, c6, [c0, #64]
; CHECK-NEXT:    adrp c3, .L__cap_merged_table+208
; CHECK-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+208]
; CHECK-NEXT:    stp c7, c8, [c0, #96]
; CHECK-NEXT:    adrp c4, .L__cap_merged_table+224
; CHECK-NEXT:    ldr c4, [c4, :lo12:.L__cap_merged_table+224]
; CHECK-NEXT:    stp c9, c10, [c0, #128]
; CHECK-NEXT:    adrp c5, .L__cap_merged_table+240
; CHECK-NEXT:    ldr c5, [c5, :lo12:.L__cap_merged_table+240]
; CHECK-NEXT:    stp c11, c1, [c0, #160]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+256
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+256]
; CHECK-NEXT:    stp c2, c3, [c0, #192]
; CHECK-NEXT:    adrp c2, .L__cap_merged_table+272
; CHECK-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+272]
; CHECK-NEXT:    stp c4, c5, [c0, #224]
; CHECK-NEXT:    adrp c3, .L__cap_merged_table+288
; CHECK-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+288]
; CHECK-NEXT:    stp c1, c2, [c0, #256]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+304
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; CHECK-NEXT:    stp c3, c1, [c0, #288]
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: getvals:
; MERGE:       .Lfunc_begin0:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c1, .L__cap_merged_table
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table]
; MERGE-NEXT:    adrp c2, .L__cap_merged_table+16
; MERGE-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+16]
; MERGE-NEXT:    adrp c3, .L__cap_merged_table+32
; MERGE-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+32]
; MERGE-NEXT:    adrp c4, .L__cap_merged_table+48
; MERGE-NEXT:    ldr c4, [c4, :lo12:.L__cap_merged_table+48]
; MERGE-NEXT:    adrp c5, .L__cap_merged_table+64
; MERGE-NEXT:    ldr c5, [c5, :lo12:.L__cap_merged_table+64]
; MERGE-NEXT:    adrp c6, .L__cap_merged_table+80
; MERGE-NEXT:    ldr c6, [c6, :lo12:.L__cap_merged_table+80]
; MERGE-NEXT:    adrp c7, .L__cap_merged_table+96
; MERGE-NEXT:    ldr c7, [c7, :lo12:.L__cap_merged_table+96]
; MERGE-NEXT:    adrp c8, .L__cap_merged_table+112
; MERGE-NEXT:    ldr c8, [c8, :lo12:.L__cap_merged_table+112]
; MERGE-NEXT:    adrp c9, .L__cap_merged_table+128
; MERGE-NEXT:    ldr c9, [c9, :lo12:.L__cap_merged_table+128]
; MERGE-NEXT:    adrp c10, .L__cap_merged_table+144
; MERGE-NEXT:    ldr c10, [c10, :lo12:.L__cap_merged_table+144]
; MERGE-NEXT:    adrp c11, .L__cap_merged_table+160
; MERGE-NEXT:    ldr c11, [c11, :lo12:.L__cap_merged_table+160]
; MERGE-NEXT:    stp c1, c2, [c0, #0]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+176
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+176]
; MERGE-NEXT:    stp c3, c4, [c0, #32]
; MERGE-NEXT:    adrp c2, .L__cap_merged_table+192
; MERGE-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+192]
; MERGE-NEXT:    stp c5, c6, [c0, #64]
; MERGE-NEXT:    adrp c3, .L__cap_merged_table+208
; MERGE-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+208]
; MERGE-NEXT:    stp c7, c8, [c0, #96]
; MERGE-NEXT:    adrp c4, .L__cap_merged_table+224
; MERGE-NEXT:    ldr c4, [c4, :lo12:.L__cap_merged_table+224]
; MERGE-NEXT:    stp c9, c10, [c0, #128]
; MERGE-NEXT:    adrp c5, .L__cap_merged_table+240
; MERGE-NEXT:    ldr c5, [c5, :lo12:.L__cap_merged_table+240]
; MERGE-NEXT:    stp c11, c1, [c0, #160]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+256
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+256]
; MERGE-NEXT:    stp c2, c3, [c0, #192]
; MERGE-NEXT:    adrp c2, .L__cap_merged_table+272
; MERGE-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+272]
; MERGE-NEXT:    stp c4, c5, [c0, #224]
; MERGE-NEXT:    adrp c3, .L__cap_merged_table+288
; MERGE-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+288]
; MERGE-NEXT:    stp c1, c2, [c0, #256]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+304
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; MERGE-NEXT:    stp c3, c1, [c0, #288]
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: getvals:
; MERGEOPT:       .Lfunc_begin0:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c1, .L__cap_merged_table+16
; MERGEOPT-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+16]
; MERGEOPT-NEXT:    adrp c2, .L__cap_merged_table+32
; MERGEOPT-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+32]
; MERGEOPT-NEXT:    adrp c3, .L__cap_merged_table+48
; MERGEOPT-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+48]
; MERGEOPT-NEXT:    adrp c4, .L__cap_merged_table+64
; MERGEOPT-NEXT:    ldr c4, [c4, :lo12:.L__cap_merged_table+64]
; MERGEOPT-NEXT:    adrp c5, .L__cap_merged_table+80
; MERGEOPT-NEXT:    ldr c5, [c5, :lo12:.L__cap_merged_table+80]
; MERGEOPT-NEXT:    adrp c6, .L__cap_merged_table+96
; MERGEOPT-NEXT:    ldr c6, [c6, :lo12:.L__cap_merged_table+96]
; MERGEOPT-NEXT:    adrp c7, .L__cap_merged_table+112
; MERGEOPT-NEXT:    ldr c7, [c7, :lo12:.L__cap_merged_table+112]
; MERGEOPT-NEXT:    adrp c8, .L__cap_merged_table+128
; MERGEOPT-NEXT:    ldr c8, [c8, :lo12:.L__cap_merged_table+128]
; MERGEOPT-NEXT:    adrp c9, .L__cap_merged_table+144
; MERGEOPT-NEXT:    ldr c9, [c9, :lo12:.L__cap_merged_table+144]
; MERGEOPT-NEXT:    adrp c10, .L__cap_merged_table+160
; MERGEOPT-NEXT:    ldr c10, [c10, :lo12:.L__cap_merged_table+160]
; MERGEOPT-NEXT:    adrp c11, .L__cap_merged_table+176
; MERGEOPT-NEXT:    ldr c11, [c11, :lo12:.L__cap_merged_table+176]
; MERGEOPT-NEXT:    stp c1, c2, [c0, #0]
; MERGEOPT-NEXT:    adrp c1, .L__cap_merged_table+192
; MERGEOPT-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+192]
; MERGEOPT-NEXT:    stp c3, c4, [c0, #32]
; MERGEOPT-NEXT:    adrp c2, .L__cap_merged_table+208
; MERGEOPT-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+208]
; MERGEOPT-NEXT:    stp c5, c6, [c0, #64]
; MERGEOPT-NEXT:    adrp c3, .L__cap_merged_table+224
; MERGEOPT-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+224]
; MERGEOPT-NEXT:    stp c7, c8, [c0, #96]
; MERGEOPT-NEXT:    adrp c4, .L__cap_merged_table+240
; MERGEOPT-NEXT:    ldr c4, [c4, :lo12:.L__cap_merged_table+240]
; MERGEOPT-NEXT:    stp c9, c10, [c0, #128]
; MERGEOPT-NEXT:    adrp c5, .L__cap_merged_table+256
; MERGEOPT-NEXT:    ldr c5, [c5, :lo12:.L__cap_merged_table+256]
; MERGEOPT-NEXT:    stp c11, c1, [c0, #160]
; MERGEOPT-NEXT:    adrp c1, .L__cap_merged_table+272
; MERGEOPT-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+272]
; MERGEOPT-NEXT:    stp c2, c3, [c0, #192]
; MERGEOPT-NEXT:    adrp c2, .L__cap_merged_table+288
; MERGEOPT-NEXT:    ldr c2, [c2, :lo12:.L__cap_merged_table+288]
; MERGEOPT-NEXT:    stp c4, c5, [c0, #224]
; MERGEOPT-NEXT:    adrp c3, .L__cap_merged_table+304
; MERGEOPT-NEXT:    ldr c3, [c3, :lo12:.L__cap_merged_table+304]
; MERGEOPT-NEXT:    stp c1, c2, [c0, #256]
; MERGEOPT-NEXT:    adrp c1, .L__cap_merged_table+320
; MERGEOPT-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+320]
; MERGEOPT-NEXT:    stp c3, c1, [c0, #288]
; MERGEOPT-NEXT:    ret c30
entry:
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x0 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %a, align 16
  %arrayidx1 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 1
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x1 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx1, align 16
  %arrayidx2 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 2
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x2 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx2, align 16
  %arrayidx3 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 3
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x3 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx3, align 16
  %arrayidx4 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 4
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x4 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx4, align 16
  %arrayidx5 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 5
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x5 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx5, align 16
  %arrayidx6 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 6
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x6 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx6, align 16
  %arrayidx7 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 7
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x7 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx7, align 16
  %arrayidx8 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 8
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x8 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx8, align 16
  %arrayidx9 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 9
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x9 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx9, align 16
  %arrayidx10 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 10
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x10 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx10, align 16
  %arrayidx11 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 11
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x11 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx11, align 16
  %arrayidx12 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 12
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x12 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx12, align 16
  %arrayidx13 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 13
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x13 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx13, align 16
  %arrayidx14 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 14
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x14 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx14, align 16
  %arrayidx15 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 15
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x15 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx15, align 16
  %arrayidx16 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 16
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x16 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx16, align 16
  %arrayidx17 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 17
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x17 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx17, align 16
  %arrayidx18 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 18
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x18 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx18, align 16
  %arrayidx19 = getelementptr inbounds i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %a, i64 19
  store i8 addrspace(200)* bitcast (i32 addrspace(200)* @x19 to i8 addrspace(200)*), i8 addrspace(200)* addrspace(200)* %arrayidx19, align 16
  ret i32 undef
}

define i32 @bazz() local_unnamed_addr addrspace(200) {
; CHECK-LABEL: bazz:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c0, .L__cap_merged_table+16
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+16]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+304
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; CHECK-NEXT:    ldr w8, [c0]
; CHECK-NEXT:    ldr w9, [c1]
; CHECK-NEXT:    add w0, w9, w8
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: bazz:
; MERGE:       .Lfunc_begin1:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c0, .L__cap_merged_table+16
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+16]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+304
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; MERGE-NEXT:    ldr w8, [c0]
; MERGE-NEXT:    ldr w9, [c1]
; MERGE-NEXT:    add w0, w9, w8
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: bazz:
; MERGEOPT:       .Lfunc_begin1:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c0, .L__cap_merged_table
; MERGEOPT-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGEOPT-NEXT:    ldr w8, [c0, #4]
; MERGEOPT-NEXT:    ldr w9, [c0, #76]
; MERGEOPT-NEXT:    add w0, w9, w8
; MERGEOPT-NEXT:    ret c30
entry:
  %0 = load i32, i32 addrspace(200)* @x1, align 4
  %1 = load i32, i32 addrspace(200)* @x19, align 4
  %add = add nsw i32 %1, %0
  ret i32 %add
}

define nonnull i32 addrspace(200)* @getx0() local_unnamed_addr addrspace(200) {
; CHECK-LABEL: getx0:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c0, .L__cap_merged_table
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: getx0:
; MERGE:       .Lfunc_begin2:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c0, .L__cap_merged_table
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: getx0:
; MERGEOPT:       .Lfunc_begin2:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c0, .L__cap_merged_table+16
; MERGEOPT-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+16]
; MERGEOPT-NEXT:    ret c30
entry:
  ret i32 addrspace(200)* @x0
}

define nonnull i32 addrspace(200)* @getx1() local_unnamed_addr addrspace(200) {
; CHECK-LABEL: getx1:
; CHECK:       .Lfunc_begin3:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c0, .L__cap_merged_table+16
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+16]
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: getx1:
; MERGE:       .Lfunc_begin3:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c0, .L__cap_merged_table+16
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+16]
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: getx1:
; MERGEOPT:       .Lfunc_begin3:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c0, .L__cap_merged_table+32
; MERGEOPT-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+32]
; MERGEOPT-NEXT:    ret c30
entry:
  ret i32 addrspace(200)* @x1
}

define i32 @foo() local_unnamed_addr addrspace(200) {
; CHECK-LABEL: foo:
; CHECK:       .Lfunc_begin4:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c0, .L__cap_merged_table+304
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+304]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+16
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+16]
; CHECK-NEXT:    ldr w8, [c0]
; CHECK-NEXT:    ldr w9, [c1]
; CHECK-NEXT:    add w0, w9, w8
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: foo:
; MERGE:       .Lfunc_begin4:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c0, .L__cap_merged_table+304
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+304]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+16
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+16]
; MERGE-NEXT:    ldr w8, [c0]
; MERGE-NEXT:    ldr w9, [c1]
; MERGE-NEXT:    add w0, w9, w8
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: foo:
; MERGEOPT:       .Lfunc_begin4:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c0, .L__cap_merged_table
; MERGEOPT-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGEOPT-NEXT:    ldr w8, [c0, #76]
; MERGEOPT-NEXT:    ldr w9, [c0, #4]
; MERGEOPT-NEXT:    add w0, w9, w8
; MERGEOPT-NEXT:    ret c30
entry:
  %0 = load i32, i32 addrspace(200)* @x19, align 4
  %1 = load i32, i32 addrspace(200)* @x1, align 4
  %add = add nsw i32 %1, %0
  ret i32 %add
}

define i32 @foo1() local_unnamed_addr addrspace(200) {
; CHECK-LABEL: foo1:
; CHECK:       .Lfunc_begin5:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c0, .L__cap_merged_table
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+304
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; CHECK-NEXT:    ldr w8, [c0]
; CHECK-NEXT:    ldr w9, [c1]
; CHECK-NEXT:    add w0, w9, w8
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: foo1:
; MERGE:       .Lfunc_begin5:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c0, .L__cap_merged_table
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+304
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; MERGE-NEXT:    ldr w8, [c0]
; MERGE-NEXT:    ldr w9, [c1]
; MERGE-NEXT:    add w0, w9, w8
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: foo1:
; MERGEOPT:       .Lfunc_begin5:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c0, .L__cap_merged_table
; MERGEOPT-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGEOPT-NEXT:    ldr w8, [c0]
; MERGEOPT-NEXT:    ldr w9, [c0, #76]
; MERGEOPT-NEXT:    add w0, w9, w8
; MERGEOPT-NEXT:    ret c30
entry:
  %0 = load i32, i32 addrspace(200)* @x0, align 4
  %1 = load i32, i32 addrspace(200)* @x19, align 4
  %add = add nsw i32 %1, %0
  ret i32 %add
}

define i32 @bat() local_unnamed_addr addrspace(200) {
; CHECK-LABEL: bat:
; CHECK:       .Lfunc_begin6:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c0, .L__cap_merged_table
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+304
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; CHECK-NEXT:    ldr w8, [c0]
; CHECK-NEXT:    ldr w9, [c1]
; CHECK-NEXT:    adrp c0, .L__cap_merged_table+128
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+128]
; CHECK-NEXT:    add w8, w9, w8
; CHECK-NEXT:    ldr w10, [c0]
; CHECK-NEXT:    add w0, w8, w10
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: bat:
; MERGE:       .Lfunc_begin6:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c0, .L__cap_merged_table
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+304
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+304]
; MERGE-NEXT:    ldr w8, [c0]
; MERGE-NEXT:    ldr w9, [c1]
; MERGE-NEXT:    adrp c0, .L__cap_merged_table+128
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+128]
; MERGE-NEXT:    add w8, w9, w8
; MERGE-NEXT:    ldr w10, [c0]
; MERGE-NEXT:    add w0, w8, w10
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: bat:
; MERGEOPT:       .Lfunc_begin6:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c0, .L__cap_merged_table
; MERGEOPT-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGEOPT-NEXT:    ldr w8, [c0]
; MERGEOPT-NEXT:    ldr w9, [c0, #76]
; MERGEOPT-NEXT:    ldr w10, [c0, #32]
; MERGEOPT-NEXT:    add w8, w9, w8
; MERGEOPT-NEXT:    add w0, w8, w10
; MERGEOPT-NEXT:    ret c30
entry:
  %0 = load i32, i32 addrspace(200)* @x0, align 4
  %1 = load i32, i32 addrspace(200)* @x19, align 4
  %add = add nsw i32 %1, %0
  %2 = load i32, i32 addrspace(200)* @x8, align 4
  %add1 = add nsw i32 %add, %2
  ret i32 %add1
}

define i32 @bif() local_unnamed_addr addrspace(200) {
; CHECK-LABEL: bif:
; CHECK:       .Lfunc_begin7:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    adrp c0, .L__cap_merged_table+304
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+304]
; CHECK-NEXT:    adrp c1, .L__cap_merged_table+112
; CHECK-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+112]
; CHECK-NEXT:    ldr w8, [c0]
; CHECK-NEXT:    ldr w9, [c1]
; CHECK-NEXT:    adrp c0, .L__cap_merged_table
; CHECK-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; CHECK-NEXT:    add w8, w9, w8
; CHECK-NEXT:    ldr w10, [c0]
; CHECK-NEXT:    add w0, w8, w10
; CHECK-NEXT:    ret c30
;
; MERGE-LABEL: bif:
; MERGE:       .Lfunc_begin7:
; MERGE-NEXT:    .cfi_startproc purecap
; MERGE-NEXT:  // %bb.0: // %entry
; MERGE-NEXT:    adrp c0, .L__cap_merged_table+304
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table+304]
; MERGE-NEXT:    adrp c1, .L__cap_merged_table+112
; MERGE-NEXT:    ldr c1, [c1, :lo12:.L__cap_merged_table+112]
; MERGE-NEXT:    ldr w8, [c0]
; MERGE-NEXT:    ldr w9, [c1]
; MERGE-NEXT:    adrp c0, .L__cap_merged_table
; MERGE-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGE-NEXT:    add w8, w9, w8
; MERGE-NEXT:    ldr w10, [c0]
; MERGE-NEXT:    add w0, w8, w10
; MERGE-NEXT:    ret c30
;
; MERGEOPT-LABEL: bif:
; MERGEOPT:       .Lfunc_begin7:
; MERGEOPT-NEXT:    .cfi_startproc purecap
; MERGEOPT-NEXT:  // %bb.0: // %entry
; MERGEOPT-NEXT:    adrp c0, .L__cap_merged_table
; MERGEOPT-NEXT:    ldr c0, [c0, :lo12:.L__cap_merged_table]
; MERGEOPT-NEXT:    ldr w8, [c0, #76]
; MERGEOPT-NEXT:    ldr w9, [c0, #28]
; MERGEOPT-NEXT:    ldr w10, [c0]
; MERGEOPT-NEXT:    add w8, w9, w8
; MERGEOPT-NEXT:    add w0, w8, w10
; MERGEOPT-NEXT:    ret c30
entry:
  %0 = load i32, i32 addrspace(200)* @x19, align 4
  %1 = load i32, i32 addrspace(200)* @x7, align 4
  %add = add nsw i32 %1, %0
  %2 = load i32, i32 addrspace(200)* @x0, align 4
  %add1 = add nsw i32 %add, %2
  ret i32 %add1
}

; ALL:	.type	.L__cap_merged_table,@object
; ALL-NEXT:	.section	.data.rel.ro,"aw",@progbits
; ALL-NEXT:	.p2align	4
; ALL-LABEL: .L__cap_merged_table:
; ALL-NEXT: .chericap x0
; ALL-NEXT: .chericap x1
; ALL-NEXT: .chericap x2
; ALL-NEXT: .chericap x3
; ALL-NEXT: .chericap x4
; ALL-NEXT: .chericap x5
; ALL-NEXT: .chericap x6
; ALL-NEXT: .chericap x7
; ALL-NEXT: .chericap x8
; ALL-NEXT: .chericap x9
; ALL-NEXT: .chericap x10
; ALL-NEXT: .chericap x11
; ALL-NEXT: .chericap x12
; ALL-NEXT: .chericap x13
; ALL-NEXT: .chericap x14
; ALL-NEXT: .chericap x15
; ALL-NEXT: .chericap x16
; ALL-NEXT: .chericap x17
; ALL-NEXT: .chericap x18
; ALL-NEXT: .chericap x19
; ALL-NEXT: .size	.L__cap_merged_table, 320

; MERGEOPT-LABEL: .L__cap_merged_table:
; MERGEOPT-NEXT:	.chericap .L_MergedGlobals
; MERGEOPT-NEXT:	.chericap x0
; MERGEOPT-NEXT:	.chericap x1
; MERGEOPT-NEXT:	.chericap x2
; MERGEOPT-NEXT:	.chericap	x3
; MERGEOPT-NEXT:	.chericap	x4
; MERGEOPT-NEXT:	.chericap	x5
; MERGEOPT-NEXT:	.chericap	x6
; MERGEOPT-NEXT:	.chericap	x7
; MERGEOPT-NEXT:	.chericap	x8
; MERGEOPT-NEXT:	.chericap	x9
; MERGEOPT-NEXT:	.chericap	x10
; MERGEOPT-NEXT:	.chericap	x11
; MERGEOPT-NEXT:	.chericap	x12
; MERGEOPT-NEXT:	.chericap	x13
; MERGEOPT-NEXT:	.chericap	x14
; MERGEOPT-NEXT:	.chericap	x15
; MERGEOPT-NEXT:	.chericap	x16
; MERGEOPT-NEXT:	.chericap	x17
; MERGEOPT-NEXT:	.chericap	x18
; MERGEOPT-NEXT:	.chericap	x19
; MERGEOPT-NEXT:	.size	.L__cap_merged_table, 336

; MERGESYM:        .set x0, .L_MergedGlobals
; MERGESYM-NEXT:	    .size	x0, 4
; MERGESYM-NEXT:   .set x1, .L_MergedGlobals+4
; MERGESYM-NEXT:	    .size	x1, 4
; MERGESYM-NEXT:   .set x2, .L_MergedGlobals+8
; MERGESYM-NEXT:	    .size	x2, 4
; MERGESYM-NEXT:   .set x3, .L_MergedGlobals+12
; MERGESYM-NEXT:       .size	x3, 4
; MERGESYM-NEXT:   .set x4, .L_MergedGlobals+16
; MERGESYM-NEXT:       .size	x4, 4
; MERGESYM-NEXT:   .set x5, .L_MergedGlobals+20
; MERGESYM-NEXT:       .size	x5, 4
; MERGESYM-NEXT:   .set x6, .L_MergedGlobals+24
; MERGESYM-NEXT:       .size	x6, 4
; MERGESYM-NEXT:   .set x7, .L_MergedGlobals+28
; MERGESYM-NEXT:       .size	x7, 4
; MERGESYM-NEXT:   .set x8, .L_MergedGlobals+32
; MERGESYM-NEXT:       .size	x8, 4
; MERGESYM-NEXT:   .set x9, .L_MergedGlobals+36
; MERGESYM-NEXT:       .size	x9, 4
; MERGESYM-NEXT:   .set x10, .L_MergedGlobals+40
; MERGESYM-NEXT:       .size	x10, 4
; MERGESYM-NEXT:   .set x11, .L_MergedGlobals+44
; MERGESYM-NEXT:       .size	x11, 4
; MERGESYM-NEXT:   .set x12, .L_MergedGlobals+48
; MERGESYM-NEXT:       .size	x12, 4
; MERGESYM-NEXT:   .set x13, .L_MergedGlobals+52
; MERGESYM-NEXT:       .size	x13, 4
; MERGESYM-NEXT:   .set x14, .L_MergedGlobals+56
; MERGESYM-NEXT:       .size	x14, 4
; MERGESYM-NEXT:   .set x15, .L_MergedGlobals+60
; MERGESYM-NEXT:       .size	x15, 4
; MERGESYM-NEXT:   .set x16, .L_MergedGlobals+64
; MERGESYM-NEXT:       .size	x16, 4
; MERGESYM-NEXT:   .set x17, .L_MergedGlobals+68
; MERGESYM-NEXT:       .size	x17, 4
; MERGESYM-NEXT:   .set x18, .L_MergedGlobals+72
; MERGESYM-NEXT:       .size	x18, 4
; MERGESYM-NEXT:   .set x19, .L_MergedGlobals+76
; MERGESYM-NEXT:       .size	x19, 4
