# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
## Copying a Q registers with NEON disabled previously resulted in non-C64
## instructions being emitted.
# RUN: llc -mtriple=aarch64 -mattr=+morello,+c64,+neon -target-abi purecap %s \
# RUN:   -start-before=postrapseudos -o - | FileCheck %s --check-prefix ASM-NEON
# RUN: llc -mtriple=aarch64 -mattr=+morello,+c64,-neon -target-abi purecap %s \
# RUN:   -start-before=postrapseudos -o - | FileCheck %s --check-prefix ASM-NO-NEON
--- |
  declare i1 @swap_arg_order(fp128, fp128) addrspace(200) nounwind

  define i1 @copy_q_reg(fp128 %f1, fp128 %f2) addrspace(200) nounwind {
  ; ASM-NEON-LABEL: copy_q_reg:
  ; ASM-NEON:       .Lfunc_begin0:
  ; ASM-NEON-NEXT:  // %bb.0:
  ; ASM-NEON-NEXT:    mov v2.16b, v0.16b
  ; ASM-NEON-NEXT:    mov v0.16b, v1.16b
  ; ASM-NEON-NEXT:    mov v1.16b, v2.16b
  ; ASM-NEON-NEXT:    b swap_arg_order
  ;
  ; ASM-NO-NEON-LABEL: copy_q_reg:
  ; ASM-NO-NEON:       .Lfunc_begin0:
  ; ASM-NO-NEON-NEXT:  // %bb.0:
  ; ASM-NO-NEON-NEXT:    str q0, [sp, #-16]!
  ; ASM-NO-NEON-NEXT:    ldr q2, [sp, #16]!
  ; ASM-NO-NEON-NEXT:    str q1, [sp, #-16]!
  ; ASM-NO-NEON-NEXT:    ldr q0, [sp, #16]!
  ; ASM-NO-NEON-NEXT:    str q2, [sp, #-16]!
  ; ASM-NO-NEON-NEXT:    ldr q1, [sp, #16]!
  ; ASM-NO-NEON-NEXT:    b swap_arg_order
    %ret = tail call i1 @swap_arg_order(fp128 %f2, fp128 %f1)
    ret i1 %ret
  }

...
---
name:            copy_q_reg
body:             |
  bb.0 (%ir-block.0):
    liveins: $q0, $q1

    renamable $q2 = COPY $q0
    $q0 = COPY killed renamable $q1
    $q1 = COPY killed renamable $q2
    TCRETURNdi @swap_arg_order, 0, csr_aarch64_aapcs_32cap_regs, implicit $sp, implicit $q0, implicit $q1

...
