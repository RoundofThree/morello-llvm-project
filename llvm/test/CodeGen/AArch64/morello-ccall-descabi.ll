; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=arm64 -mattr=+morello,+c64  -target-abi purecap -disable-post-ra -cheri-cap-table-abi=fn-desc -o - %s | FileCheck %s

define chericcallcc i32 @bar(i8 addrspace(200) * %ddc,  i8 addrspace(200) * %pcc, i32 %num, i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: bar:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    add w0, w1, w0
; CHECK-NEXT:    mov x0, xzr
; CHECK-NEXT:    mov x1, xzr
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    mov x3, xzr
; CHECK-NEXT:    mov x4, xzr
; CHECK-NEXT:    mov x5, xzr
; CHECK-NEXT:    mov x6, xzr
; CHECK-NEXT:    mov x7, xzr
; CHECK-NEXT:    fmov d0, xzr
; CHECK-NEXT:    fmov d1, xzr
; CHECK-NEXT:    fmov d2, xzr
; CHECK-NEXT:    fmov d3, xzr
; CHECK-NEXT:    fmov d4, xzr
; CHECK-NEXT:    fmov d5, xzr
; CHECK-NEXT:    fmov d6, xzr
; CHECK-NEXT:    fmov d7, xzr
; CHECK-NEXT:    ret c30
entry:
  %add = add nsw i32 %b, %a
  ret i32 %add
}

define chericcallcc double @barf(i8 addrspace(200) * %ddc,  i8 addrspace(200) * %pcc, i32 %num, double %a, double %b, double %c) {
; CHECK-LABEL: barf:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    fadd d0, d1, d0
; CHECK-NEXT:    fadd d0, d0, d2
; CHECK-NEXT:    mov x0, xzr
; CHECK-NEXT:    mov x1, xzr
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    mov x3, xzr
; CHECK-NEXT:    mov x4, xzr
; CHECK-NEXT:    mov x5, xzr
; CHECK-NEXT:    mov x6, xzr
; CHECK-NEXT:    mov x7, xzr
; CHECK-NEXT:    fmov d0, xzr
; CHECK-NEXT:    fmov d1, xzr
; CHECK-NEXT:    fmov d2, xzr
; CHECK-NEXT:    fmov d3, xzr
; CHECK-NEXT:    fmov d4, xzr
; CHECK-NEXT:    fmov d5, xzr
; CHECK-NEXT:    fmov d6, xzr
; CHECK-NEXT:    fmov d7, xzr
; CHECK-NEXT:    ret c30
entry:
  %add = fadd double %b, %a
  %add1 = fadd double %add, %c
  ret double %add1
}

@c = external global i32, align 4
@d = external global double, align 8

define void @fiz() addrspace(200) {
; CHECK-LABEL: fiz:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp c17, c30, [csp, #-32]! // 32-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    .cfi_offset c30, -16
; CHECK-NEXT:    .cfi_offset c17, -32
; CHECK-NEXT:    mov x1, xzr
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    mov x3, xzr
; CHECK-NEXT:    mov x4, xzr
; CHECK-NEXT:    mov x5, xzr
; CHECK-NEXT:    mov x6, xzr
; CHECK-NEXT:    mov x7, xzr
; CHECK-NEXT:    mov x8, xzr
; CHECK-NEXT:    mov x9, xzr
; CHECK-NEXT:    mov x10, xzr
; CHECK-NEXT:    mov x11, xzr
; CHECK-NEXT:    fmov d0, xzr
; CHECK-NEXT:    fmov d1, xzr
; CHECK-NEXT:    fmov d2, xzr
; CHECK-NEXT:    fmov d3, xzr
; CHECK-NEXT:    fmov d4, xzr
; CHECK-NEXT:    fmov d5, xzr
; CHECK-NEXT:    fmov d6, xzr
; CHECK-NEXT:    fmov d7, xzr
; CHECK-NEXT:    bl bid
; CHECK-NEXT:    mov c29, c0
; CHECK-NEXT:    mov x0, xzr
; CHECK-NEXT:    mov x1, xzr
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    mov x3, xzr
; CHECK-NEXT:    mov x4, xzr
; CHECK-NEXT:    mov x5, xzr
; CHECK-NEXT:    mov x6, xzr
; CHECK-NEXT:    mov x7, xzr
; CHECK-NEXT:    mov x8, xzr
; CHECK-NEXT:    mov x9, xzr
; CHECK-NEXT:    mov x10, xzr
; CHECK-NEXT:    mov x11, xzr
; CHECK-NEXT:    fmov d0, xzr
; CHECK-NEXT:    fmov d1, xzr
; CHECK-NEXT:    fmov d2, xzr
; CHECK-NEXT:    fmov d3, xzr
; CHECK-NEXT:    fmov d4, xzr
; CHECK-NEXT:    fmov d5, xzr
; CHECK-NEXT:    fmov d6, xzr
; CHECK-NEXT:    fmov d7, xzr
; CHECK-NEXT:    bl bif
; CHECK-NEXT:    mov x0, xzr
; CHECK-NEXT:    mov x1, xzr
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    mov x3, xzr
; CHECK-NEXT:    mov x4, xzr
; CHECK-NEXT:    mov x5, xzr
; CHECK-NEXT:    mov x6, xzr
; CHECK-NEXT:    mov x7, xzr
; CHECK-NEXT:    mov x8, xzr
; CHECK-NEXT:    mov x9, xzr
; CHECK-NEXT:    mov x10, xzr
; CHECK-NEXT:    mov x11, xzr
; CHECK-NEXT:    fmov d0, xzr
; CHECK-NEXT:    fmov d1, xzr
; CHECK-NEXT:    fmov d2, xzr
; CHECK-NEXT:    fmov d3, xzr
; CHECK-NEXT:    fmov d4, xzr
; CHECK-NEXT:    fmov d5, xzr
; CHECK-NEXT:    fmov d6, xzr
; CHECK-NEXT:    fmov d7, xzr
; CHECK-NEXT:    ldpblr c29, [c29]
; CHECK-NEXT:    ldp c17, c30, [csp], #32 // 32-byte Folded Reload
; CHECK-NEXT:    ret c30
entry:
  %call = tail call chericcallcc i8 addrspace(200)* bitcast (i8 addrspace(200)* (...) addrspace(200)* @bid to i8 addrspace(200)* () addrspace(200)*)()
  tail call chericcallcc void bitcast (void (...) addrspace(200)* @bif to void () addrspace(200)*)()
  %0 = bitcast i8 addrspace(200)* %call to void () addrspace(200)*
  tail call chericcallcc void %0()
  ret void
}

declare i8 addrspace(200)* @bid(...) local_unnamed_addr addrspace(200)
declare void @bif(...) local_unnamed_addr addrspace(200)
