; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=arm64 -mattr=+c64,+morello -target-abi purecap  -o - %s | FileCheck %s

target datalayout = "e-m:e-pf200:128:128-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-A200-P200-G200"
target triple = "aarch64-none--elf"

$_Z3fooIiET_S0_ = comdat any

@test = addrspace(200) global i32 0, align 4
@llvm.global_ctors = appending addrspace(200) global [1 x { i32, void () addrspace(200)*, i8 addrspace(200)* }] [{ i32, void () addrspace(200)*, i8 addrspace(200)* } { i32 65535, void () addrspace(200)* @_GLOBAL__sub_I_unnamed.cpp, i8 addrspace(200)* null }]

define internal void @__cxx_global_var_init() addrspace(200) {
; CHECK-LABEL: __cxx_global_var_init:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str c30, [csp, #-16]! // 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset c30, -16
; CHECK-NEXT:    adrp c0, _Z3fooIiET_S0_
; CHECK-NEXT:    add c0, c0, :lo12:_Z3fooIiET_S0_
; CHECK-NEXT:    seal c0, c0, rb
; CHECK-NEXT:    bl _Z3barQPFiiE
; CHECK-NEXT:    adrp c1, :got:test
; CHECK-NEXT:    ldr c1, [c1, :got_lo12:test]
; CHECK-NEXT:    str w0, [c1]
; CHECK-NEXT:    ldr c30, [csp], #16 // 16-byte Folded Reload
; CHECK-NEXT:    ret c30
entry:
  %call = call i32 @_Z3barQPFiiE(i32 (i32) addrspace(200)* @_Z3fooIiET_S0_)
  store volatile i32 %call, i32 addrspace(200)* @test, align 4
  ret void
}

declare i32 @_Z3barQPFiiE(i32 (i32) addrspace(200)*) addrspace(200)

define internal i32 @_Z3fooIiET_S0_(i32 %val) addrspace(200) comdat {
; CHECK-LABEL: _Z3fooIiET_S0_:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    sub csp, csp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    str w0, [csp, #12]
; CHECK-NEXT:    add csp, csp, #16
; CHECK-NEXT:    ret c30
entry:
  %val.addr = alloca i32, align 4, addrspace(200)
  store i32 %val, i32 addrspace(200)* %val.addr, align 4
  %0 = load i32, i32 addrspace(200)* %val.addr, align 4
  ret i32 %0
}

define internal void @_GLOBAL__sub_I_unnamed.cpp() addrspace(200) {
; CHECK-LABEL: _GLOBAL__sub_I_unnamed.cpp:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:    .cfi_startproc purecap
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str c30, [csp, #-16]! // 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset c30, -16
; CHECK-NEXT:    bl __cxx_global_var_init
; CHECK-NEXT:    ldr c30, [csp], #16 // 16-byte Folded Reload
; CHECK-NEXT:    ret c30
entry:
  call void @__cxx_global_var_init()
  ret void
}
