; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/memcpy-no-preserve-tags-attr.ll
; Check that the no_preserve_tags annotation on memcpy/memmove intrinsics allows
; use to inline struct copies >= capability size.
; RUN: llc -mtriple=aarch64 --relocation-model=pic -target-abi purecap -mattr=+morello,+c64 -o - < %s | FileCheck %s

%struct.pair = type { i64, i64 }

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* nocapture writeonly, i8 addrspace(200)* nocapture readonly, i64, i1)
declare void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* nocapture writeonly, i8 addrspace(200)* nocapture readonly, i64, i1)

; Without a no_preserve_tags attribute we always call memcpy. In this case we
; don't know whether the type might actually contain capabilities (e.g. unions).
define void @memcpy_no_attr(%struct.pair addrspace(200)* %a, %struct.pair addrspace(200)* %b) addrspace(200) nounwind {
; CHECK-LABEL: memcpy_no_attr:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str c30, [csp, #-16]! // 16-byte Folded Spill
; CHECK-NEXT:    mov w2, #16
; CHECK-NEXT:    bl memcpy
; CHECK-NEXT:    ldr c30, [csp], #16 // 16-byte Folded Reload
; CHECK-NEXT:    ret c30
entry:
  %a_i8 = bitcast %struct.pair addrspace(200)* %a to i8 addrspace(200)*
  %b_i8 = bitcast %struct.pair addrspace(200)* %b to i8 addrspace(200)*
  call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* align 8 %a_i8, i8 addrspace(200)* align 8 %b_i8, i64 16, i1 false)
  ret void
}

define void @memmove_no_attr(%struct.pair addrspace(200)* %a, %struct.pair addrspace(200)* %b) addrspace(200) nounwind {
; CHECK-LABEL: memmove_no_attr:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str c30, [csp, #-16]! // 16-byte Folded Spill
; CHECK-NEXT:    mov w2, #16
; CHECK-NEXT:    bl memmove
; CHECK-NEXT:    ldr c30, [csp], #16 // 16-byte Folded Reload
; CHECK-NEXT:    ret c30
entry:
  %a_i8 = bitcast %struct.pair addrspace(200)* %a to i8 addrspace(200)*
  %b_i8 = bitcast %struct.pair addrspace(200)* %b to i8 addrspace(200)*
  call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* align 8 %a_i8, i8 addrspace(200)* align 8 %b_i8, i64 16, i1 false)
  ret void
}

; We have to emit a call if the intrinsic has must_preserve_cheri_tags:
define void @memcpy_must_preserve(%struct.pair addrspace(200)* %a, %struct.pair addrspace(200)* %b) addrspace(200) nounwind {
; CHECK-LABEL: memcpy_must_preserve:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str c30, [csp, #-16]! // 16-byte Folded Spill
; CHECK-NEXT:    mov w2, #16
; CHECK-NEXT:    bl memcpy
; CHECK-NEXT:    ldr c30, [csp], #16 // 16-byte Folded Reload
; CHECK-NEXT:    ret c30
entry:
  %a_i8 = bitcast %struct.pair addrspace(200)* %a to i8 addrspace(200)*
  %b_i8 = bitcast %struct.pair addrspace(200)* %b to i8 addrspace(200)*
  call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* align 8 %a_i8, i8 addrspace(200)* align 8 %b_i8, i64 16, i1 false) must_preserve_cheri_tags
  ret void
}

define void @memmove_must_preserve(%struct.pair addrspace(200)* %a, %struct.pair addrspace(200)* %b) addrspace(200) nounwind {
; CHECK-LABEL: memmove_must_preserve:
; CHECK:       .Lfunc_begin3:
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str c30, [csp, #-16]! // 16-byte Folded Spill
; CHECK-NEXT:    mov w2, #16
; CHECK-NEXT:    bl memmove
; CHECK-NEXT:    ldr c30, [csp], #16 // 16-byte Folded Reload
; CHECK-NEXT:    ret c30
entry:
  %a_i8 = bitcast %struct.pair addrspace(200)* %a to i8 addrspace(200)*
  %b_i8 = bitcast %struct.pair addrspace(200)* %b to i8 addrspace(200)*
  call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* align 8 %a_i8, i8 addrspace(200)* align 8 %b_i8, i64 16, i1 false) must_preserve_cheri_tags
  ret void
}

; We should be able to inline the call memcpy/memmove if the intrinsic has no_preserve_cheri_tags:
define void @memcpy_no_preserve(%struct.pair addrspace(200)* %a, %struct.pair addrspace(200)* %b) addrspace(200) nounwind {
; CHECK-LABEL: memcpy_no_preserve:
; CHECK:       .Lfunc_begin4:
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ldr q0, [c1]
; CHECK-NEXT:    str q0, [c0]
; CHECK-NEXT:    ret c30
entry:
  %a_i8 = bitcast %struct.pair addrspace(200)* %a to i8 addrspace(200)*
  %b_i8 = bitcast %struct.pair addrspace(200)* %b to i8 addrspace(200)*
  call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* align 8 %a_i8, i8 addrspace(200)* align 8 %b_i8, i64 16, i1 false) no_preserve_cheri_tags
  ret void
}

define void @memmove_no_preserve(%struct.pair addrspace(200)* %a, %struct.pair addrspace(200)* %b) addrspace(200) nounwind {
; CHECK-LABEL: memmove_no_preserve:
; CHECK:       .Lfunc_begin5:
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    ldr q0, [c1]
; CHECK-NEXT:    str q0, [c0]
; CHECK-NEXT:    ret c30
entry:
  %a_i8 = bitcast %struct.pair addrspace(200)* %a to i8 addrspace(200)*
  %b_i8 = bitcast %struct.pair addrspace(200)* %b to i8 addrspace(200)*
  call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* align 8 %a_i8, i8 addrspace(200)* align 8 %b_i8, i64 16, i1 false) no_preserve_cheri_tags
  ret void
}
