; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/cheri-pointer-comparison.ll
; RUN: llc -mtriple=aarch64 --relocation-model=pic -target-abi aapcs -mattr=+morello,-c64 %s -o - | FileCheck %s --check-prefix=HYBRID
; RUN: llc -mtriple=aarch64 --relocation-model=pic -target-abi purecap -mattr=+morello,+c64 %s -o - | FileCheck %s --check-prefix=PURECAP
; This series of tests serves two purposes.
; The first purpose is to check that we generate efficient code for all
; capability comparisons, conditional branches and conditional selects.
; The second purpose is to check that we generate code that honours the
; signedness of the IR (which is always unsigned when emitting IR for C
; langage-level pointers, whereas __intcap uses the signedness of the type).
; NGINX has a loop with (void*)-1 as a sentinel value which was never entered
; due to this bug.
; Original issue: https://github.com/CTSRD-CHERI/llvm/issues/199
; Fixed upstream in https://reviews.llvm.org/D70917
; (be15dfa88fb1ed94d12f374797f98ede6808f809)
;
; Original source code showing this surprising behaviour (for CHERI-MIPS):
; int
; main(void)
; {
;         void *a, *b;
;
;         a = (void *)0x12033091e;
;         b = (void *)0xffffffffffffffff;
;
;         if (a < b) {
;                 printf("ok\n");
;                 return (0);
;         }
;
;         printf("surprising result\n");
;         return (1);
; }
;
; Morello had a similar code generation issue for selects, where a less than
; generated a csel instruction using a singed predicate instead of the unsigned
; one:
; void *select_lt(void *p1, void *p2) {
;   return p1 < p2 ? p1 : p2;
; }
; See https://git.morello-project.org/morello/llvm-project/-/issues/22

define i32 @eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: eq:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, eq
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: eq:
; PURECAP:       .Lfunc_begin0:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, eq
; PURECAP-NEXT:    ret c30
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ne:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, ne
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ne:
; PURECAP:       .Lfunc_begin1:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, ne
; PURECAP-NEXT:    ret c30
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ugt:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, hi
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ugt:
; PURECAP:       .Lfunc_begin2:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, hi
; PURECAP-NEXT:    ret c30
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: uge:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, hs
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: uge:
; PURECAP:       .Lfunc_begin3:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, hs
; PURECAP-NEXT:    ret c30
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ult:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, lo
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ult:
; PURECAP:       .Lfunc_begin4:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, lo
; PURECAP-NEXT:    ret c30
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ule:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, ls
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ule:
; PURECAP:       .Lfunc_begin5:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, ls
; PURECAP-NEXT:    ret c30
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sgt:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, gt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sgt:
; PURECAP:       .Lfunc_begin6:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, gt
; PURECAP-NEXT:    ret c30
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sge:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, ge
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sge:
; PURECAP:       .Lfunc_begin7:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, ge
; PURECAP-NEXT:    ret c30
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: slt:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, lt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: slt:
; PURECAP:       .Lfunc_begin8:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, lt
; PURECAP-NEXT:    ret c30
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sle:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    cset w0, le
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sle:
; PURECAP:       .Lfunc_begin9:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    cset w0, le
; PURECAP-NEXT:    ret c30
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: eq_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, eq
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: eq_null:
; PURECAP:       .Lfunc_begin10:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, eq
; PURECAP-NEXT:    ret c30
  %cmp = icmp eq i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ne_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, ne
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ne_null:
; PURECAP:       .Lfunc_begin11:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, ne
; PURECAP-NEXT:    ret c30
  %cmp = icmp ne i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ugt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ugt_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, hi
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ugt_null:
; PURECAP:       .Lfunc_begin12:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, hi
; PURECAP-NEXT:    ret c30
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @uge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: uge_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, hs
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: uge_null:
; PURECAP:       .Lfunc_begin13:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, hs
; PURECAP-NEXT:    ret c30
  %cmp = icmp uge i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ult_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ult_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, lo
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ult_null:
; PURECAP:       .Lfunc_begin14:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, lo
; PURECAP-NEXT:    ret c30
  %cmp = icmp ult i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ule_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ule_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, ls
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ule_null:
; PURECAP:       .Lfunc_begin15:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, ls
; PURECAP-NEXT:    ret c30
  %cmp = icmp ule i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sgt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sgt_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, gt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sgt_null:
; PURECAP:       .Lfunc_begin16:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, gt
; PURECAP-NEXT:    ret c30
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sge_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, ge
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sge_null:
; PURECAP:       .Lfunc_begin17:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, ge
; PURECAP-NEXT:    ret c30
  %cmp = icmp sge i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @slt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: slt_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, lt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: slt_null:
; PURECAP:       .Lfunc_begin18:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, lt
; PURECAP-NEXT:    ret c30
  %cmp = icmp slt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sle_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sle_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    cset w0, le
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sle_null:
; PURECAP:       .Lfunc_begin19:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    cset w0, le
; PURECAP-NEXT:    ret c30
  %cmp = icmp sle i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i8 addrspace(200)* @select_eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_eq:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, eq
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_eq:
; PURECAP:       .Lfunc_begin20:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, eq
; PURECAP-NEXT:    ret c30
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ne:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, ne
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ne:
; PURECAP:       .Lfunc_begin21:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, ne
; PURECAP-NEXT:    ret c30
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ugt:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, hi
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ugt:
; PURECAP:       .Lfunc_begin22:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, hi
; PURECAP-NEXT:    ret c30
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_uge:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, hs
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_uge:
; PURECAP:       .Lfunc_begin23:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, hs
; PURECAP-NEXT:    ret c30
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ult:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, lo
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ult:
; PURECAP:       .Lfunc_begin24:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, lo
; PURECAP-NEXT:    ret c30
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ule:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, ls
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ule:
; PURECAP:       .Lfunc_begin25:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, ls
; PURECAP-NEXT:    ret c30
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sgt:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, gt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sgt:
; PURECAP:       .Lfunc_begin26:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, gt
; PURECAP-NEXT:    ret c30
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sge:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, ge
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sge:
; PURECAP:       .Lfunc_begin27:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, ge
; PURECAP-NEXT:    ret c30
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_slt:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, lt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_slt:
; PURECAP:       .Lfunc_begin28:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, lt
; PURECAP-NEXT:    ret c30
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sle:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    csel c0, c0, c1, le
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sle:
; PURECAP:       .Lfunc_begin29:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    csel c0, c0, c1, le
; PURECAP-NEXT:    ret c30
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_eq_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_eq_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, eq
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_eq_null:
; PURECAP:       .Lfunc_begin30:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, eq
; PURECAP-NEXT:    ret c30
  %cmp = icmp eq i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ne_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ne_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, ne
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ne_null:
; PURECAP:       .Lfunc_begin31:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, ne
; PURECAP-NEXT:    ret c30
  %cmp = icmp ne i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ugt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ugt_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, hi
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ugt_null:
; PURECAP:       .Lfunc_begin32:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, hi
; PURECAP-NEXT:    ret c30
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_uge_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_uge_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, hs
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_uge_null:
; PURECAP:       .Lfunc_begin33:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, hs
; PURECAP-NEXT:    ret c30
  %cmp = icmp uge i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ult_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ult_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, lo
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ult_null:
; PURECAP:       .Lfunc_begin34:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, lo
; PURECAP-NEXT:    ret c30
  %cmp = icmp ult i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ule_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ule_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, ls
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ule_null:
; PURECAP:       .Lfunc_begin35:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, ls
; PURECAP-NEXT:    ret c30
  %cmp = icmp ule i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sgt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sgt_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, gt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sgt_null:
; PURECAP:       .Lfunc_begin36:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, gt
; PURECAP-NEXT:    ret c30
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sge_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sge_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, ge
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sge_null:
; PURECAP:       .Lfunc_begin37:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, ge
; PURECAP-NEXT:    ret c30
  %cmp = icmp sge i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_slt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_slt_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, lt
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_slt_null:
; PURECAP:       .Lfunc_begin38:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, lt
; PURECAP-NEXT:    ret c30
  %cmp = icmp slt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sle_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sle_null:
; HYBRID:       // %bb.0:
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    csel c0, c0, c1, le
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sle_null:
; PURECAP:       .Lfunc_begin39:
; PURECAP-NEXT:  // %bb.0:
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    csel c0, c0, c1, le
; PURECAP-NEXT:    ret c30
  %cmp = icmp sle i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

declare i32 @func1() nounwind
declare i32 @func2() nounwind

define i32 @branch_eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_eq:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.eq .LBB40_2
; HYBRID-NEXT:  // %bb.1: // %if.end
; HYBRID-NEXT:    b func2
; HYBRID-NEXT:  .LBB40_2: // %if.then
; HYBRID-NEXT:    b func1
;
; PURECAP-LABEL: branch_eq:
; PURECAP:       .Lfunc_begin40:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.eq .LBB40_2
; PURECAP-NEXT:  // %bb.1: // %if.end
; PURECAP-NEXT:    b func2
; PURECAP-NEXT:  .LBB40_2: // %if.then
; PURECAP-NEXT:    b func1
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ne:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.eq .LBB41_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB41_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ne:
; PURECAP:       .Lfunc_begin41:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.eq .LBB41_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB41_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ugt:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.ls .LBB42_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB42_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ugt:
; PURECAP:       .Lfunc_begin42:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.ls .LBB42_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB42_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_uge:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.lo .LBB43_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB43_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_uge:
; PURECAP:       .Lfunc_begin43:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.lo .LBB43_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB43_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ult:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.hs .LBB44_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB44_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ult:
; PURECAP:       .Lfunc_begin44:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.hs .LBB44_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB44_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ule:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.hi .LBB45_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB45_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ule:
; PURECAP:       .Lfunc_begin45:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.hi .LBB45_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB45_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sgt:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.le .LBB46_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB46_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_sgt:
; PURECAP:       .Lfunc_begin46:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.le .LBB46_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB46_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sge:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.lt .LBB47_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB47_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_sge:
; PURECAP:       .Lfunc_begin47:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.lt .LBB47_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB47_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_slt:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.ge .LBB48_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB48_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_slt:
; PURECAP:       .Lfunc_begin48:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.ge .LBB48_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB48_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sle:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, x1
; HYBRID-NEXT:    b.gt .LBB49_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB49_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_sle:
; PURECAP:       .Lfunc_begin49:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, x1
; PURECAP-NEXT:    b.gt .LBB49_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB49_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_eq_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_eq_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cbz x0, .LBB50_2
; HYBRID-NEXT:  // %bb.1: // %if.end
; HYBRID-NEXT:    b func2
; HYBRID-NEXT:  .LBB50_2: // %if.then
; HYBRID-NEXT:    b func1
;
; PURECAP-LABEL: branch_eq_null:
; PURECAP:       .Lfunc_begin50:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cbz x0, .LBB50_2
; PURECAP-NEXT:  // %bb.1: // %if.end
; PURECAP-NEXT:    b func2
; PURECAP-NEXT:  .LBB50_2: // %if.then
; PURECAP-NEXT:    b func1
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ne_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ne_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cbz x0, .LBB51_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB51_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ne_null:
; PURECAP:       .Lfunc_begin51:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cbz x0, .LBB51_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB51_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ugt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ugt_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    b.ls .LBB52_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB52_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ugt_null:
; PURECAP:       .Lfunc_begin52:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    b.ls .LBB52_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB52_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_uge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_uge_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    b.lo .LBB53_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB53_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_uge_null:
; PURECAP:       .Lfunc_begin53:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    b.lo .LBB53_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB53_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ult_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ult_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    b.hs .LBB54_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB54_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ult_null:
; PURECAP:       .Lfunc_begin54:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    b.hs .LBB54_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB54_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ule_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ule_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    b.hi .LBB55_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB55_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_ule_null:
; PURECAP:       .Lfunc_begin55:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    b.hi .LBB55_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB55_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sgt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sgt_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    b.le .LBB56_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB56_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_sgt_null:
; PURECAP:       .Lfunc_begin56:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    b.le .LBB56_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB56_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sge_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    tbnz x0, #63, .LBB57_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB57_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_sge_null:
; PURECAP:       .Lfunc_begin57:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    tbnz x0, #63, .LBB57_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB57_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_slt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_slt_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    b.ge .LBB58_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB58_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_slt_null:
; PURECAP:       .Lfunc_begin58:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    b.ge .LBB58_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB58_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sle_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sle_null:
; HYBRID:       // %bb.0: // %entry
; HYBRID-NEXT:    cmp x0, #0
; HYBRID-NEXT:    b.gt .LBB59_2
; HYBRID-NEXT:  // %bb.1: // %if.then
; HYBRID-NEXT:    b func1
; HYBRID-NEXT:  .LBB59_2: // %if.end
; HYBRID-NEXT:    b func2
;
; PURECAP-LABEL: branch_sle_null:
; PURECAP:       .Lfunc_begin59:
; PURECAP-NEXT:  // %bb.0: // %entry
; PURECAP-NEXT:    cmp x0, #0
; PURECAP-NEXT:    b.gt .LBB59_2
; PURECAP-NEXT:  // %bb.1: // %if.then
; PURECAP-NEXT:    b func1
; PURECAP-NEXT:  .LBB59_2: // %if.end
; PURECAP-NEXT:    b func2
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}
