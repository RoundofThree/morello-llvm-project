; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/optsize-preserve-tags-memcpy-crash.ll
; RUN: llc -mtriple=aarch64 --relocation-model=pic -target-abi purecap -mattr=+morello,+c64 < %s -o - | FileCheck %s
; The following code copying 31 bytes (with capability alignment) using the
; must_preserve_tags attribute used to trigger a "(Align < CapSize)" assertion
; inside diagnoseInefficientCheriMemOp() when compiling with -Oz.
; This function should not be called since the reason we are falling back to memcpy
; is that the load/store limit is reached (and not the alignment).
; However, the code was checking for limit reached using a simple `(CapSize * Limit) < Size`
; check which fails here since the last 15 bytes need four (8 + 4 + 2 + 1 bytes) copies on
; architectures where LLVM does not emit misaligned loads/stores.

define hidden void @optnone_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optnone noinline nounwind {
; CHECK-LABEL: optnone_preserve_tags_memcpy:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ldr c2, [c1, #0]
; CHECK-NEXT:    str c2, [c0, #0]
; CHECK-NEXT:    ldr x8, [c1, #16]
; CHECK-NEXT:    ldr w9, [c1, #24]
; CHECK-NEXT:    ldrh w10, [c1, #28]
; CHECK-NEXT:    ldrb w11, [c1, #30]
; CHECK-NEXT:    strb w11, [c0, #30]
; CHECK-NEXT:    strh w10, [c0, #28]
; CHECK-NEXT:    str w9, [c0, #24]
; CHECK-NEXT:    str x8, [c0, #16]
; CHECK-NEXT:    ret c30
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optsize_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optsize nounwind {
; CHECK-LABEL: optsize_preserve_tags_memcpy:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov w2, #31
; CHECK-NEXT:    b memcpy
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @default_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) nounwind {
; CHECK-LABEL: default_preserve_tags_memcpy:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ldr c2, [c1, #0]
; CHECK-NEXT:    str c2, [c0, #0]
; CHECK-NEXT:    ldrb w8, [c1, #30]
; CHECK-NEXT:    ldrh w9, [c1, #28]
; CHECK-NEXT:    ldr w10, [c1, #24]
; CHECK-NEXT:    ldr x11, [c1, #16]
; CHECK-NEXT:    strb w8, [c0, #30]
; CHECK-NEXT:    strh w9, [c0, #28]
; CHECK-NEXT:    str w10, [c0, #24]
; CHECK-NEXT:    str x11, [c0, #16]
; CHECK-NEXT:    ret c30
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optnone_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optnone noinline nounwind {
; CHECK-LABEL: optnone_preserve_tags_memmove:
; CHECK:       .Lfunc_begin3:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov w2, #31
; CHECK-NEXT:    b memmove
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optsize_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optsize nounwind {
; CHECK-LABEL: optsize_preserve_tags_memmove:
; CHECK:       .Lfunc_begin4:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov w2, #31
; CHECK-NEXT:    b memmove
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @default_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) nounwind{
; CHECK-LABEL: default_preserve_tags_memmove:
; CHECK:       .Lfunc_begin5:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    mov w2, #31
; CHECK-NEXT:    b memmove
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

declare void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noalias nocapture writeonly, i8 addrspace(200)* noalias nocapture readonly, i64, i1 immarg) addrspace(200)
declare void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noalias nocapture writeonly, i8 addrspace(200)* noalias nocapture readonly, i64, i1 immarg) addrspace(200)
