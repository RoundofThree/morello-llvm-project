This directory contains end-to-end tests, expected to run on an FVP model
or board running Android.


Prerequisites
=============

These tests assume that they have been checked out somewhere inside an
Android development tree (you don't need to check out the whole llvm repository,
just this directory). The tests can then be discovered and built using
Android's own build system.

The tests also assume that Android is already running and we can communicate
with it via adb, and that lldb-server has already been uploaded to it (e.g. at
`/data/local/tmp/lldb-server`).

In order to run the tests, you will need to have `lit` available. You can either
install it with `pip` or use the one from the llvm tree, if present. You will
also need FileCheck, which should be part of any llvm install hierarchy that was
configured with '-DLLVM_INSTALL_UTILS=ON'.


How to run
==========

In order to build the tests, you need to copy this whole subdirectory somewhere
in the Android tree (e.g. at test/).

To build the tests, you first need to run these commands in the Android root:
> source build/envsetup.sh
> lunch morello_fvp_nano-eng

Then in the directory where you copied the tests:
> mma

This should build all the tests.

To run all the tests, invoke `lit` in the same directory:
> lit -v . --param ANDROID_OUT=/path/to/android/out/target/product/morello/ \
           --param ORIGINAL_SOURCE_PREFIX=test/morello-android-tests \
           --param LLDB_SERVER_PORT=5040 \
           --param LLVM_TOOLS_DIR=/path/to/dir/containing/lldb/and/FileCheck \
           --param LLDB_SERVER=/path/to/lldb-server/on/device

If you wish to run only a subset of the tests, you can use a filter, e.g:
> LIT_FILTER=frames lit -v . [...]

Note: If you see errors such as "failed to get reply to handshake packet" you
can try to run lit serially (add -j 1 to your invocation).

Note: The ORIGINAL_SOURCE_PREFIX is used to inform lldb about the path where the
sources were located during the build (relative to the Android tree root). If you
are unsure which prefix to use, you can try to load one of the test executables
in lldb and find out:
lldb > target create /path/to/android/out/target/product/morello/symbols/data/nativetestc64/frames/frames
lldb > source info -n main
[...]: test/morello-android-tests/frames/main.cpp
You will want the path up to and including morello-android-tests.


Test structure
==============

Each test should live in its own subdirectory (referred to as $TESTNAME below).
This subdirectory should contain:
* sources for the target that will be debugged
* an `Android.bp` file describing how the target needs to be built
* a `$TESTNAME.test` file containing lldb commands and FileCheck expectations

Each test must build an executable named `$TESTNAME`, which will be
automatically uploaded to the model and run under lldb by the test harness.
If you wish to use a shared library for your test, it should be named
`$TESTNAME-dyn`. Tests with more than one shared library are not currently
supported.

A test can be built & run under the pure capability ABI, the hybrid ABI or both.
This is controlled as follows:
* in the `Android.bp`, set `compile_multilib` to "c64", "a64" or "both"
* in the `$TESTNAME.test` file, use a RUN line of `%test-c64 %s` for purecap,
  `%test-a64 %s` for hybrid or both RUN lines for both; use the `CHECK-C64`
  prefix for checks that are only pertinent to purecap, the `CHECK-A64` prefix
  for checks that only apply to hybrid, and the `CHECK` prefix for checks that
  are the same for both ABIs
